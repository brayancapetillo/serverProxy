# Dockerfile for proxy server based on Ubuntu 20.04

# +================ BASE IMAGE ==================+ #
# Use official Ubuntu 20.04 as base image
FROM ubuntu:20.04

# +=========== ENVIRONMENT VARIABLES ============+ #
# Prevent interactive prompts during package installation (automate builds)
ENV DEBIAN_FRONTEND=noninteractive

# &================== VERSION ==================&#
LABEL version="3.0.0"



# +============ INSTALL SUPERVISOR ==============+ #
# Update package lists and install Supervisor to manage processes
RUN apt update && apt install -y supervisor && apt clean

# Create directory for Supervisor logs (default log location)
RUN mkdir -p /var/log/supervisor

# Copy custom Supervisor configuration file into container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf



# +============ INSTALL SQUID PROXY =============+ #
# Update package lists again and install Squid proxy server
RUN apt update && apt install -y squid && apt clean

# Create directory for additional Squid configuration files (e.g., blacklists)
RUN mkdir -p /etc/squid/blacklists

# Copy main Squid configuration file into container
COPY squid/config/squid.conf /etc/squid/squid.conf

# Copy custom blacklist files for Squid configuration
COPY squid/blacklists /etc/squid/blacklists



# +============= INSTALL NGINX ==================+ #
# Update package lists again and install nginx for web server functionality
RUN apt update && apt install -y nginx && apt clean

# Copy NGINX config files
COPY nginx/config/*.conf /etc/nginx/sites-available/

# Copy site content
COPY nginx/sites/adminsiteanars /var/www/adminsiteanars
COPY nginx/sites/sakurasitemovi /var/www/sakurasitemovi

# Enable the sites
RUN ln -s /etc/nginx/sites-available/adminsiteanars.conf /etc/nginx/sites-enabled/adminsiteanars.conf
RUN ln -s /etc/nginx/sites-available/sakurasitemovi.conf /etc/nginx/sites-enabled/sakurasitemovi.conf


# +============= INSTALL AND CONFIGURE BIND =============+ #
# Update package lists and install BIND9 DNS server along with utilities and documentation
RUN apt update && apt install -y bind9 bind9utils bind9-doc && apt clean

# Create necessary directories for BIND runtime cache and DNS zone files
RUN mkdir -p /var/cache/bind /etc/bind/zones

# Copy BIND main configuration files into the container
COPY bind/config/named.conf /etc/bind/named.conf
COPY bind/config/named.conf.local /etc/bind/named.conf.local
COPY bind/config/named.conf.options /etc/bind/named.conf.options

# Copy DNS zone files to the designated zones directory
COPY bind/zones/ /etc/bind/zones/



# +============= INSTALL IPTABLES =============+ #
# Update package lists and install iptables for managing firewall rules
RUN apt update && apt install -y iptables && apt clean

# *====== IPTABLES SERVICES ======+ #
# update package lists and install vsftpd (FTP server)
RUN apt update && apt install -y vsftpd && apt clean

# create directory for service vsftpd to test FTP connections
RUN mkdir -p /var/run/vsftpd/empty && chmod 755 /var/run/vsftpd/empty

# copy vsftpd configuration file into the container
COPY iptables/ftp/vsftpd.conf /etc/vsftpd.conf

# delete carriage return characters from vsftpd.conf to avoid issues with line endings
RUN sed -i 's/\r$//' /etc/vsftpd.conf

# create a user for FTP access
RUN useradd -m movi && echo "movi:1234" | chpasswd


# +======= INSTALL NETWORK AND DNS TOOLS =======+ #
# Update package lists and install:
# - curl: command line tool for transferring data with URLs
# - iputils-ping: network utility to test host reachability
# - nano: simple command line text editor
# - dnsutils: DNS lookup tools like dig
# - iproute2: collection of utilities for managing networking
# - ftp: command line FTP client
# - telnet: simple command line tool for testing network connections
# Then clean apt cache to reduce image size
RUN apt-get update && apt-get install -y curl iputils-ping nano dnsutils iproute2 ftp telnet && rm -rf /var/lib/apt/lists/*


# +========== DNS MANUAL & IPTABLES =============+ #
# Copy custom DNS configuration file for manual DNS settings script to the container
COPY global/setup-dns.sh /usr/local/bin/setup-dns.sh
RUN chmod +x /usr/local/bin/setup-dns.sh

# Copy custom iptables rules setup script to the container
COPY global/setup-iptables.sh /usr/local/bin/setup-iptables.sh
RUN chmod +x /usr/local/bin/setup-iptables.sh

# Copy custom iptables and dns setup script to the container
COPY global/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh



# +================== PORTS ====================+ #
# Expose the default Squid proxy port (3128)
EXPOSE 3128 80 53/udp 53/tcp 21



# +================== GENERAL ==================+ #
# Remove cached package lists to reduce image size
RUN rm -rf /var/lib/apt/lists/*



# +============== STARTUP COMMAND ==============+ #
# Use supervisord to start and manage Squid and other processes
CMD ["/usr/local/bin/start.sh"]


